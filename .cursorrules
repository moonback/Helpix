# üöÄ R√®gles Cursor pour Helpix

## üìã Vue d'ensemble du projet

Ce projet est une plateforme d'entraide g√©olocalis√©e construite avec :
- **Frontend** : React 18 + TypeScript + Vite
- **Backend** : Supabase (PostgreSQL + Auth + Real-time)
- **UI** : Tailwind CSS + Framer Motion
- **State** : Zustand + React Query
- **G√©olocalisation** : Leaflet.js + React-Leaflet

## üéØ R√®gles g√©n√©rales

### Architecture et patterns
- Suivez une **architecture feature-based** avec des composants r√©utilisables
- Utilisez des **hooks personnalis√©s** pour la logique m√©tier
- Privil√©giez la **composition de composants** plut√¥t que l'h√©ritage
- Maintenez une **s√©paration claire** entre UI, logique et donn√©es

### Code quality
- **TypeScript strict** : Utilisez toujours des types explicites
- **ESLint + Prettier** : Respectez les r√®gles de formatage
- **Tests** : √âcrivez des tests pour les composants et hooks
- **Documentation** : Ajoutez des commentaires JSDoc pour les fonctions publiques

## üîß R√®gles sp√©cifiques par technologie

### React
- Utilisez des **fonctional components** avec hooks
- **React.memo** pour les composants qui re-render souvent
- **useCallback** et **useMemo** pour optimiser les performances
- **Custom hooks** pour la logique r√©utilisable
- **Error boundaries** pour la gestion d'erreurs

### TypeScript
- **Interfaces** plut√¥t que types pour les objets
- **Generics** pour les composants et hooks r√©utilisables
- **Utility types** (Pick, Omit, Partial, etc.)
- **Strict null checks** activ√©s
- **Exhaustive checks** pour les unions

### Tailwind CSS
- **Utility-first** : Privil√©giez les classes Tailwind
- **Responsive** : Utilisez les breakpoints (sm:, md:, lg:, xl:)
- **Dark mode** : Supportez `dark:` classes
- **Custom classes** : Cr√©ez des composants r√©utilisables
- **Accessibilit√©** : Utilisez les classes d'accessibilit√©

### Zustand
- **Stores s√©par√©s** par domaine m√©tier
- **Actions claires** avec des noms descriptifs
- **Middleware persist** pour la persistance
- **Immutabilit√©** : Ne modifiez jamais l'√©tat directement

## üìÅ Structure des fichiers

### Organisation
```
src/
‚îú‚îÄ‚îÄ components/          # Composants UI r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Composants de base (Button, Input, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ layout/         # Composants de mise en page
‚îú‚îÄ‚îÄ features/            # Fonctionnalit√©s par domaine
‚îÇ   ‚îú‚îÄ‚îÄ auth/           # Authentification
‚îÇ   ‚îú‚îÄ‚îÄ tasks/          # Gestion des t√¢ches
‚îÇ   ‚îî‚îÄ‚îÄ profile/        # Profil utilisateur
‚îú‚îÄ‚îÄ hooks/               # Hooks personnalis√©s
‚îú‚îÄ‚îÄ stores/              # Stores Zustand
‚îú‚îÄ‚îÄ lib/                 # Utilitaires et configurations
‚îú‚îÄ‚îÄ types/               # Types TypeScript globaux
‚îî‚îÄ‚îÄ styles/              # Styles globaux et Tailwind
```

### Nommage
- **Composants** : PascalCase (ex: `TaskCard.tsx`)
- **Hooks** : camelCase avec pr√©fixe `use` (ex: `useAuth.ts`)
- **Stores** : camelCase avec suffixe `Store` (ex: `taskStore.ts`)
- **Types** : PascalCase (ex: `TaskStatus`)
- **Interfaces** : PascalCase avec pr√©fixe `I` optionnel (ex: `ITask`)

## üß™ Tests et qualit√©

### Tests
- **React Testing Library** pour les composants
- **Jest** pour les tests unitaires
- **Coverage** : Minimum 80%
- **Mocks** pour Supabase et autres services externes
- **Tests d'int√©gration** pour les flux critiques

### Linting
- **ESLint** avec r√®gles strictes
- **Prettier** pour le formatage
- **Husky** pour les pre-commit hooks
- **Conventional Commits** pour les messages de commit

## üîí S√©curit√© et performance

### S√©curit√©
- **Validation** des donn√©es c√¥t√© client ET serveur
- **Sanitisation** des entr√©es utilisateur
- **RLS** (Row Level Security) pour Supabase
- **HTTPS** obligatoire en production
- **Headers de s√©curit√©** appropri√©s

### Performance
- **Code splitting** avec React.lazy
- **Memoization** des composants co√ªteux
- **Debouncing** pour les recherches et filtres
- **Lazy loading** des images et composants
- **Optimisation des bundles** avec Vite

## üåç G√©olocalisation

### R√®gles sp√©cifiques
- **Permission** : Demandez toujours l'autorisation de localisation
- **Fallback** : G√©rez les cas o√π la g√©olocalisation √©choue
- **Performance** : Cachez les coordonn√©es et distances calcul√©es
- **Accessibilit√©** : Fournissez des alternatives textuelles
- **Privacy** : Respectez le RGPD et les pr√©f√©rences utilisateur

## üì± Responsive et accessibilit√©

### Responsive
- **Mobile-first** : Commencez par mobile
- **Breakpoints** : Utilisez les breakpoints Tailwind
- **Touch-friendly** : Boutons et interactions adapt√©s au tactile
- **Performance mobile** : Optimisez pour les connexions lentes

### Accessibilit√©
- **ARIA labels** pour les √©l√©ments interactifs
- **Navigation clavier** compl√®te
- **Contraste** suffisant (WCAG AA minimum)
- **Screen readers** : Testez avec des lecteurs d'√©cran
- **Focus management** : Gestion claire du focus

## üöÄ D√©ploiement et CI/CD

### Environnements
- **Development** : Variables d'environnement locales
- **Staging** : Tests et validation
- **Production** : D√©ploiement s√©curis√©

### Variables d'environnement
```bash
# Supabase
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_anon_key

# G√©olocalisation
VITE_MAP_TILE_URL=your_map_tiles_url
VITE_NOMINATIM_URL=https://nominatim.openstreetmap.org

# Analytics (optionnel)
VITE_ANALYTICS_ID=your_analytics_id
```

## üìö Documentation

### Standards
- **README.md** : Documentation principale du projet
- **JSDoc** : Commentaires pour toutes les fonctions publiques
- **ARCHITECTURE.md** : Architecture technique d√©taill√©e
- **API_DOCS.md** : Documentation des endpoints
- **CHANGELOG.md** : Historique des changements

### Commentaires
```typescript
/**
 * Calcule la distance entre deux points g√©ographiques
 * @param lat1 - Latitude du premier point
 * @param lng1 - Longitude du premier point
 * @param lat2 - Latitude du second point
 * @param lng2 - Longitude du second point
 * @returns Distance en kilom√®tres
 * @example
 * const distance = calculateDistance(48.8566, 2.3522, 43.2965, 5.3698);
 */
export const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
  // Impl√©mentation...
};
```

## üé® UI/UX Guidelines

### Design System
- **Coh√©rence** : Utilisez les composants UI existants
- **Th√®me** : Support du mode clair/sombre
- **Couleurs** : Palette de couleurs d√©finie
- **Typographie** : Hi√©rarchie claire des textes
- **Espacement** : Syst√®me d'espacement coh√©rent

### Composants
- **R√©utilisables** : Cr√©ez des composants g√©n√©riques
- **Props** : Interfaces claires et validation
- **Variants** : Support de diff√©rentes variantes
- **Accessibilit√©** : ARIA labels et navigation clavier

## üîÑ Workflow de d√©veloppement

### Branches
- **main** : Code de production
- **develop** : Branche de d√©veloppement
- **feature/** : Nouvelles fonctionnalit√©s
- **fix/** : Corrections de bugs
- **hotfix/** : Corrections urgentes

### Commits
- **Conventional Commits** : feat:, fix:, docs:, style:, refactor:, test:, chore:
- **Messages clairs** : Description concise du changement
- **Scope** : Indiquez le domaine affect√©

## üìä Monitoring et analytics

### Performance
- **Core Web Vitals** : LCP, FID, CLS
- **Bundle analyzer** : Surveillez la taille des bundles
- **Lighthouse** : Tests de performance r√©guliers

### Erreurs
- **Error tracking** : Capturez et loggez les erreurs
- **User feedback** : Collectez les retours utilisateurs
- **Analytics** : Suivez l'usage des fonctionnalit√©s

## üéØ Priorit√©s de d√©veloppement

### MVP (Termin√©)
- Authentification utilisateur
- CRUD des t√¢ches
- G√©olocalisation basique
- Interface responsive

### V1.0 (En cours)
- Syst√®me de messagerie
- Notifications en temps r√©el
- Syst√®me de notation
- Filtres avanc√©s

### Futures versions
- Paiements et transactions
- Applications mobiles
- IA et recommandations
- Internationalisation

---

## üí° Conseils pour Cursor

1. **Utilisez les raccourcis** : Cmd/Ctrl + K pour les commandes
2. **Copilot Chat** : Posez des questions sur le code
3. **Refactoring** : Utilisez les outils de refactoring int√©gr√©s
4. **Debugging** : Int√©gration avec les outils de debug
5. **Git** : Gestion Git int√©gr√©e
6. **Terminal** : Terminal int√©gr√© pour les commandes
7. **Extensions** : Installez les extensions utiles (ESLint, Prettier, etc.)

## üö® R√®gles strictes

- **NE JAMAIS** committer du code non test√©
- **NE JAMAIS** exposer des cl√©s API dans le code
- **NE JAMAIS** ignorer les erreurs TypeScript
- **TOUJOURS** valider les donn√©es utilisateur
- **TOUJOURS** g√©rer les cas d'erreur
- **TOUJOURS** tester sur mobile et desktop

---

**Ces r√®gles garantissent la qualit√©, la maintenabilit√© et la scalabilit√© du projet Helpix.**
