import { supabase } from './supabase';

/**
 * D√©bite automatiquement le cr√©ateur de la t√¢che pour payer l'aide apport√©e
 * @param taskOwnerId - ID du propri√©taire de la t√¢che
 * @param taskId - ID de la t√¢che
 * @param amount - Montant des cr√©dits √† d√©biter
 * @param taskTitle - Titre de la t√¢che
 * @param helperUserId - ID de l'utilisateur qui a aid√©
 */
export const debitTaskOwnerForPayment = async (
  taskOwnerId: string,
  taskId: number,
  amount: number,
  taskTitle: string,
  helperUserId: string
): Promise<boolean> => {
  try {
    // R√©cup√©rer l'ID du wallet du propri√©taire de la t√¢che
    const { data: ownerWallet, error: walletError } = await supabase
      .from('wallets')
      .select('id, balance, total_spent')
      .eq('user_id', taskOwnerId)
      .single();

    if (walletError || !ownerWallet) {
      console.warn(`‚ö†Ô∏è Wallet non trouv√© pour le propri√©taire de la t√¢che ${taskOwnerId}:`, walletError);
      return false;
    }

    // V√©rifier que le propri√©taire a suffisamment de cr√©dits
    if (ownerWallet.balance < amount) {
      console.error(`‚ùå Solde insuffisant pour le propri√©taire de la t√¢che. Solde: ${ownerWallet.balance}, Montant requis: ${amount}`);
      return false;
    }

    // Cr√©er la transaction de d√©bit
    const { error: transactionError } = await supabase
      .from('transactions')
      .insert({
        wallet_id: ownerWallet.id,
        type: 'debit',
        amount: amount,
        description: `Paiement pour l'aide re√ßue sur la t√¢che: ${taskTitle}`,
        reference_type: 'task_completion',
        reference_id: taskId.toString(),
        status: 'completed',
        metadata: {
          task_title: taskTitle,
          task_id: taskId,
          helper_user_id: helperUserId
        }
      });

    if (transactionError) {
      console.error('Erreur lors de la cr√©ation de la transaction de d√©bit:', transactionError);
      return false;
    }

    // Mettre √† jour le solde du wallet du propri√©taire
    const { error: updateError } = await supabase
      .from('wallets')
      .update({
        balance: ownerWallet.balance - amount,
        total_spent: ownerWallet.total_spent + amount,
        updated_at: new Date().toISOString()
      })
      .eq('id', ownerWallet.id);

    if (updateError) {
      console.error('Erreur lors de la mise √† jour du solde du propri√©taire:', updateError);
      return false;
    }

    console.log(`‚úÖ ${amount} cr√©dits d√©bit√©s du propri√©taire ${taskOwnerId} pour la t√¢che "${taskTitle}"`);
    return true;

  } catch (error) {
    console.error('Erreur lors du d√©bit automatique:', error);
    return false;
  }
};

/**
 * Cr√©dite automatiquement un utilisateur pour l'aide apport√©e √† une t√¢che
 * @param userId - ID de l'utilisateur √† cr√©diter
 * @param taskId - ID de la t√¢che
 * @param amount - Montant des cr√©dits √† accorder
 * @param taskTitle - Titre de la t√¢che
 * @param taskOwnerId - ID du propri√©taire de la t√¢che
 */
export const creditUserForTaskCompletion = async (
  userId: string,
  taskId: number,
  amount: number,
  taskTitle: string,
  taskOwnerId: string
): Promise<boolean> => {
  try {
    // R√©cup√©rer l'ID du wallet de l'utilisateur
    const { data: userWallet, error: walletError } = await supabase
      .from('wallets')
      .select('id')
      .eq('user_id', userId)
      .single();

    if (walletError || !userWallet) {
      console.warn(`‚ö†Ô∏è Wallet non trouv√© pour l'utilisateur ${userId}:`, walletError);
      return false;
    }

    // Cr√©er la transaction de cr√©dit
    const { error: transactionError } = await supabase
      .from('transactions')
      .insert({
        wallet_id: userWallet.id,
        type: 'credit',
        amount: amount,
        description: `Gain pour l'aide apport√©e √† la t√¢che: ${taskTitle}`,
        reference_type: 'task_completion',
        reference_id: taskId.toString(),
        status: 'completed',
        metadata: {
          task_title: taskTitle,
          task_id: taskId,
          task_owner: taskOwnerId
        }
      });

    if (transactionError) {
      console.error('Erreur lors de la cr√©ation de la transaction:', transactionError);
      return false;
    }

    // R√©cup√©rer le wallet actuel pour calculer le nouveau solde
    const { data: currentWallet, error: fetchError } = await supabase
      .from('wallets')
      .select('balance, total_earned')
      .eq('id', userWallet.id)
      .single();

    if (fetchError || !currentWallet) {
      console.error('Erreur lors de la r√©cup√©ration du wallet:', fetchError);
      return false;
    }

    // Mettre √† jour le solde du wallet
    const { error: updateError } = await supabase
      .from('wallets')
      .update({
        balance: currentWallet.balance + amount,
        total_earned: currentWallet.total_earned + amount,
        updated_at: new Date().toISOString()
      })
      .eq('id', userWallet.id);

    if (updateError) {
      console.error('Erreur lors de la mise √† jour du solde:', updateError);
      return false;
    }

    console.log(`‚úÖ ${amount} cr√©dits accord√©s √† l'utilisateur ${userId} pour la t√¢che "${taskTitle}"`);
    return true;

  } catch (error) {
    console.error('Erreur lors du cr√©dit automatique:', error);
    return false;
  }
};

/**
 * Traite le paiement complet d'une t√¢che termin√©e (d√©bit du cr√©ateur + cr√©dit de l'aideur)
 * @param taskOwnerId - ID du propri√©taire de la t√¢che
 * @param helperUserId - ID de l'utilisateur qui a aid√©
 * @param taskId - ID de la t√¢che
 * @param amount - Montant des cr√©dits √† transf√©rer
 * @param taskTitle - Titre de la t√¢che
 */
export const processTaskPayment = async (
  taskOwnerId: string,
  helperUserId: string,
  taskId: number,
  amount: number,
  taskTitle: string
): Promise<boolean> => {
  try {
    console.log(`üîÑ Traitement du paiement pour la t√¢che "${taskTitle}" (${amount} cr√©dits)`);
    
    // 1. D√©biter le cr√©ateur de la t√¢che
    const debitSuccess = await debitTaskOwnerForPayment(
      taskOwnerId,
      taskId,
      amount,
      taskTitle,
      helperUserId
    );

    if (!debitSuccess) {
      console.error('‚ùå √âchec du d√©bit du propri√©taire de la t√¢che');
      return false;
    }

    // 2. Cr√©diter l'utilisateur qui a aid√©
    const creditSuccess = await creditUserForTaskCompletion(
      helperUserId,
      taskId,
      amount,
      taskTitle,
      taskOwnerId
    );

    if (!creditSuccess) {
      console.error('‚ùå √âchec du cr√©dit de l\'utilisateur qui a aid√©');
      // TODO: Impl√©menter un syst√®me de rollback si n√©cessaire
      return false;
    }

    console.log(`‚úÖ Paiement trait√© avec succ√®s pour la t√¢che "${taskTitle}"`);
    return true;

  } catch (error) {
    console.error('Erreur lors du traitement du paiement:', error);
    return false;
  }
};

/**
 * V√©rifie si le paiement d'une t√¢che a d√©j√† √©t√© trait√©
 * @param taskId - ID de la t√¢che
 * @returns true si le paiement a d√©j√† √©t√© trait√©
 */
export const hasTaskPaymentBeenProcessed = async (taskId: number): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('transactions')
      .select('id, type')
      .eq('reference_type', 'task_completion')
      .eq('reference_id', taskId.toString())
      .in('type', ['credit', 'debit']);

    if (error) {
      console.error('Erreur lors de la v√©rification du paiement:', error);
      return false;
    }

    // V√©rifier qu'il y a √† la fois un cr√©dit ET un d√©bit pour cette t√¢che
    const hasCredit = data.some(t => t.type === 'credit');
    const hasDebit = data.some(t => t.type === 'debit');
    
    return hasCredit && hasDebit;
  } catch (error) {
    console.error('Erreur lors de la v√©rification du paiement:', error);
    return false;
  }
};

/**
 * V√©rifie si un utilisateur a d√©j√† √©t√© cr√©dit√© pour une t√¢che (fonction legacy)
 * @param taskId - ID de la t√¢che
 * @returns true si l'utilisateur a d√©j√† √©t√© cr√©dit√©
 * @deprecated Utilisez hasTaskPaymentBeenProcessed √† la place
 */
export const hasUserBeenCreditedForTask = async (taskId: number): Promise<boolean> => {
  return hasTaskPaymentBeenProcessed(taskId);
};
