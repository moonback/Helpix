-- üß™ Script de test pour le syst√®me de paiement automatique
-- Ce script permet de tester le syst√®me de paiement en cr√©ant des donn√©es de test

-- ‚ö†Ô∏è IMPORTANT: Remplacez les UUIDs ci-dessous par de vrais UUIDs d'utilisateurs existants
-- Vous pouvez obtenir les UUIDs avec cette requ√™te:
-- SELECT id FROM auth.users LIMIT 2;

-- 1. Cr√©er des utilisateurs de test (si n√©cessaire)
-- Note: Les utilisateurs doivent √™tre cr√©√©s via l'interface d'authentification

-- 2. Cr√©er des wallets de test
-- Assurez-vous que les utilisateurs ont des wallets avec des soldes suffisants

-- 3. Cr√©er une t√¢che de test
-- ‚ö†Ô∏è REMPLACEZ '00000000-0000-0000-0000-000000000001' par un vrai UUID d'utilisateur
INSERT INTO tasks (
  user_id,
  title,
  description,
  category,
  status,
  priority,
  estimated_duration,
  budget_credits,
  required_skills,
  tags,
  location,
  latitude,
  longitude,
  created_at
) VALUES (
  '00000000-0000-0000-0000-000000000001', -- ‚ö†Ô∏è UUID du cr√©ateur de la t√¢che
  'Test de paiement automatique',
  'Cette t√¢che sert √† tester le syst√®me de paiement automatique',
  'local',
  'open',
  'medium',
  2,
  25, -- 25 cr√©dits
  ARRAY['test', 'paiement'],
  ARRAY['test', 'automatique'],
  'Paris, France',
  48.8566,
  2.3522,
  NOW()
);

-- 4. Assigner la t√¢che √† un utilisateur
-- ‚ö†Ô∏è REMPLACEZ '00000000-0000-0000-0000-000000000002' par un vrai UUID d'utilisateur
-- ‚ö†Ô∏è REMPLACEZ 1 par l'ID r√©el de la t√¢che cr√©√©e ci-dessus
UPDATE tasks 
SET 
  assigned_to = '00000000-0000-0000-0000-000000000002', -- ‚ö†Ô∏è UUID de l'aideur
  status = 'in_progress',
  updated_at = NOW()
WHERE id = 1; -- ‚ö†Ô∏è ID de la t√¢che cr√©√©e

-- 5. Marquer la t√¢che comme termin√©e (d√©clenche le paiement automatique)
UPDATE tasks 
SET 
  status = 'completed',
  completion_date = NOW(),
  progress_percentage = 100,
  updated_at = NOW()
WHERE id = 1; -- ‚ö†Ô∏è ID de la t√¢che cr√©√©e

-- 6. V√©rifier les transactions cr√©√©es
-- ‚ö†Ô∏è REMPLACEZ 1 par l'ID r√©el de la t√¢che cr√©√©e
SELECT 
  t.id,
  t.type,
  t.amount,
  t.description,
  t.status,
  t.created_at,
  t.metadata
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.reference_id = '1' -- ‚ö†Ô∏è ID de la t√¢che cr√©√©e
ORDER BY t.created_at;

-- 7. V√©rifier les soldes des wallets
-- ‚ö†Ô∏è REMPLACEZ les UUIDs par les vrais UUIDs utilis√©s
SELECT 
  w.user_id,
  w.balance,
  w.total_earned,
  w.total_spent,
  w.updated_at
FROM wallets w
WHERE w.user_id IN (
  '00000000-0000-0000-0000-000000000001', -- ‚ö†Ô∏è UUID du cr√©ateur
  '00000000-0000-0000-0000-000000000002'  -- ‚ö†Ô∏è UUID de l'aideur
)
ORDER BY w.user_id;

-- 8. V√©rifier que le paiement a √©t√© trait√©
-- ‚ö†Ô∏è REMPLACEZ 1 par l'ID r√©el de la t√¢che cr√©√©e
SELECT 
  CASE 
    WHEN COUNT(*) = 2 THEN 'Paiement trait√© correctement'
    ELSE 'Paiement incomplet ou non trait√©'
  END as status_paiement,
  COUNT(*) as nombre_transactions
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.reference_id = '1' -- ‚ö†Ô∏è ID de la t√¢che cr√©√©e
  AND t.type IN ('credit', 'debit');

-- 9. Nettoyer les donn√©es de test (optionnel)
-- ‚ö†Ô∏è REMPLACEZ 1 par l'ID r√©el de la t√¢che cr√©√©e
-- DELETE FROM transactions WHERE reference_type = 'task_completion' AND reference_id = '1';
-- DELETE FROM tasks WHERE id = 1;

-- üìä Requ√™tes de monitoring

-- Nombre de paiements trait√©s aujourd'hui
SELECT 
  DATE(created_at) as date,
  COUNT(*) as paiements_traites
FROM transactions 
WHERE reference_type = 'task_completion'
  AND DATE(created_at) = CURRENT_DATE
GROUP BY DATE(created_at);

-- Montant total des paiements par jour
SELECT 
  DATE(created_at) as date,
  SUM(amount) as montant_total,
  COUNT(*) as nombre_transactions
FROM transactions 
WHERE reference_type = 'task_completion'
  AND type = 'credit'
  AND DATE(created_at) >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(created_at)
ORDER BY date DESC;

-- Top des utilisateurs qui re√ßoivent le plus de paiements
SELECT 
  t.metadata->>'task_owner' as createur_id,
  COUNT(*) as nombre_paiements_recus,
  SUM(t.amount) as montant_total_recu
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.type = 'credit'
  AND t.created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY t.metadata->>'task_owner'
ORDER BY montant_total_recu DESC
LIMIT 10;

-- Top des utilisateurs qui paient le plus
SELECT 
  t.metadata->>'helper_user_id' as aideur_id,
  COUNT(*) as nombre_paiements_effectues,
  SUM(t.amount) as montant_total_paye
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.type = 'debit'
  AND t.created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY t.metadata->>'helper_user_id'
ORDER BY montant_total_paye DESC
LIMIT 10;

-- T√¢ches avec paiements en attente (statut completed mais pas de transactions)
SELECT 
  t.id,
  t.title,
  t.budget_credits,
  t.status,
  t.completion_date,
  CASE 
    WHEN tr.id IS NULL THEN 'Paiement en attente'
    ELSE 'Paiement trait√©'
  END as statut_paiement
FROM tasks t
LEFT JOIN transactions tr ON tr.reference_type = 'task_completion' 
  AND tr.reference_id = t.id::text
WHERE t.status = 'completed'
  AND t.budget_credits > 0
  AND t.assigned_to IS NOT NULL
ORDER BY t.completion_date DESC;

-- üîç Diagnostic des erreurs

-- Transactions √©chou√©es
SELECT 
  t.id,
  t.type,
  t.amount,
  t.status,
  t.description,
  t.created_at,
  t.metadata
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.status = 'failed'
ORDER BY t.created_at DESC;

-- Wallets avec solde n√©gatif (erreur possible)
SELECT 
  w.user_id,
  w.balance,
  w.total_earned,
  w.total_spent,
  w.updated_at
FROM wallets w
WHERE w.balance < 0
ORDER BY w.balance ASC;

-- Transactions orphelines (sans t√¢che correspondante)
SELECT 
  t.id,
  t.type,
  t.amount,
  t.reference_id,
  t.created_at
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND NOT EXISTS (
    SELECT 1 FROM tasks ts 
    WHERE ts.id = t.reference_id::integer
  )
ORDER BY t.created_at DESC;
