-- üß™ Script de test pour les t√¢ches existantes avec paiements en attente
-- Ce script teste le syst√®me de paiement sur les t√¢ches d√©j√† termin√©es

-- 1. V√©rifier les t√¢ches termin√©es avec paiements en attente
SELECT 
  'T√¢ches termin√©es avec paiements en attente:' as info,
  t.id,
  t.title,
  t.budget_credits,
  t.user_id as creator_id,
  t.assigned_to as helper_id,
  t.status,
  t.completion_date,
  CASE 
    WHEN tr.id IS NULL THEN 'Paiement en attente'
    ELSE 'Paiement trait√©'
  END as statut_paiement
FROM tasks t
LEFT JOIN transactions tr ON tr.reference_type = 'task_completion' 
  AND tr.reference_id = t.id::text
WHERE t.status = 'completed'
  AND t.budget_credits > 0
  AND t.assigned_to IS NOT NULL
ORDER BY t.completion_date DESC;

-- 2. V√©rifier les soldes des utilisateurs concern√©s
SELECT 
  'Soldes des utilisateurs concern√©s:' as info,
  w.user_id,
  w.balance,
  w.total_earned,
  w.total_spent,
  w.updated_at
FROM wallets w
WHERE w.user_id IN (
  SELECT DISTINCT user_id FROM tasks 
  WHERE status = 'completed' AND budget_credits > 0 AND assigned_to IS NOT NULL
  UNION
  SELECT DISTINCT assigned_to FROM tasks 
  WHERE status = 'completed' AND budget_credits > 0 AND assigned_to IS NOT NULL
)
ORDER BY w.user_id;

-- 3. D√©clencher manuellement le paiement pour une t√¢che sp√©cifique
-- Remplacez TASK_ID par l'ID d'une t√¢che avec "Paiement en attente"
/*
UPDATE tasks 
SET 
  status = 'completed',
  completion_date = NOW(),
  progress_percentage = 100,
  updated_at = NOW()
WHERE id = TASK_ID; -- Remplacez par l'ID de la t√¢che
*/

-- 4. V√©rifier les transactions apr√®s paiement
/*
SELECT 
  t.id,
  t.type,
  t.amount,
  t.description,
  t.status,
  t.created_at,
  t.metadata
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.reference_id = 'TASK_ID' -- Remplacez par l'ID de la t√¢che
ORDER BY t.created_at;
*/

-- 5. V√©rifier les soldes apr√®s paiement
/*
SELECT 
  w.user_id,
  w.balance,
  w.total_earned,
  w.total_spent,
  w.updated_at
FROM wallets w
WHERE w.user_id IN (
  SELECT user_id FROM tasks WHERE id = TASK_ID
  UNION
  SELECT assigned_to FROM tasks WHERE id = TASK_ID
)
ORDER BY w.user_id;
*/

-- üìä Requ√™tes de monitoring

-- Nombre de paiements trait√©s aujourd'hui
SELECT 
  DATE(created_at) as date,
  COUNT(*) as paiements_traites
FROM transactions 
WHERE reference_type = 'task_completion'
  AND DATE(created_at) = CURRENT_DATE
GROUP BY DATE(created_at);

-- Montant total des paiements par jour (7 derniers jours)
SELECT 
  DATE(created_at) as date,
  SUM(amount) as montant_total,
  COUNT(*) as nombre_transactions
FROM transactions 
WHERE reference_type = 'task_completion'
  AND type = 'credit'
  AND DATE(created_at) >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(created_at)
ORDER BY date DESC;

-- T√¢ches avec paiements en attente (d√©taill√©)
SELECT 
  t.id,
  t.title,
  t.budget_credits,
  t.status,
  t.completion_date,
  t.user_id as creator_id,
  t.assigned_to as helper_id,
  CASE 
    WHEN tr.id IS NULL THEN 'Paiement en attente'
    ELSE 'Paiement trait√©'
  END as statut_paiement
FROM tasks t
LEFT JOIN transactions tr ON tr.reference_type = 'task_completion' 
  AND tr.reference_id = t.id::text
WHERE t.status = 'completed'
  AND t.budget_credits > 0
  AND t.assigned_to IS NOT NULL
ORDER BY t.completion_date DESC;

-- üîç Diagnostic des erreurs

-- Transactions √©chou√©es
SELECT 
  t.id,
  t.type,
  t.amount,
  t.status,
  t.description,
  t.created_at,
  t.metadata
FROM transactions t
WHERE t.reference_type = 'task_completion'
  AND t.status = 'failed'
ORDER BY t.created_at DESC;

-- Wallets avec solde n√©gatif (erreur possible)
SELECT 
  w.user_id,
  w.balance,
  w.total_earned,
  w.total_spent,
  w.updated_at
FROM wallets w
WHERE w.balance < 0
ORDER BY w.balance ASC;

-- üß™ Test rapide: D√©clencher le paiement pour toutes les t√¢ches en attente
-- ATTENTION: Ceci va traiter TOUTES les t√¢ches en attente de paiement
/*
UPDATE tasks 
SET 
  status = 'completed',
  completion_date = NOW(),
  progress_percentage = 100,
  updated_at = NOW()
WHERE id IN (
  SELECT t.id
  FROM tasks t
  LEFT JOIN transactions tr ON tr.reference_type = 'task_completion' 
    AND tr.reference_id = t.id::text
  WHERE t.status = 'completed'
    AND t.budget_credits > 0
    AND t.assigned_to IS NOT NULL
    AND tr.id IS NULL
);
*/

-- V√©rifier le r√©sultat apr√®s traitement automatique
/*
SELECT 
  'R√©sultat apr√®s traitement automatique:' as info,
  COUNT(*) as total_taches_traitees,
  SUM(budget_credits) as total_credits_transferes
FROM tasks t
JOIN transactions tr ON tr.reference_type = 'task_completion' 
  AND tr.reference_id = t.id::text
WHERE t.status = 'completed'
  AND t.budget_credits > 0
  AND t.assigned_to IS NOT NULL
  AND tr.type = 'credit';
*/
